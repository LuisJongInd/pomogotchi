#ifndef __SPI_H__
#define __SPI_H__

#include "stm32f429zi.h"

/* Exported TypeDefs */

/*
 * Defines the wiring configuration
 */
typedef enum  { 
 SPI_Type_FullDuplex,                 // Full Duplex: Two wires, data transmission/reception        
 SPI_Type_HalfDuplex,                 // Hal Duplex: One wire, data transmission/receptions
 SPI_Type_RxOnly,                     // RxOnly: One wire, data transmission
} SPI_Config_Type; 

/*
 * Selects the mode of the SPI peripheral
 */
typedef enum  { 
 SPI_Mode_0,                          // SPI 0: CPOL 0 (clock LOW when idle), CPHA 0 (data reception in Falling edge)
 SPI_Mode_1,                          // SPI 1: CPOL 0 (clock LOW when idle), CPHA 1 (data reception in Rising edge) 
 SPI_Mode_2,                          // SPI 2: CPOL 0 (clock HIGH when idle), CPHA 0 (data reception in Faling edge)
 SPI_Mode_3,                          // SPI 3: CPOL 0 (clock HIGH when idle), CPHA 1 (data reception in Rising edge)
} SPI_Config_Mode;

/*
 * Defines wether the device is master or slave
 */
typedef enum { 
 SPI_Hierarchy_Slave,                 // Slave mode: the clock is generated by another source
 SPI_Hierarchy_Master,                // Master mode: the clock is generated by the peripheral
} SPI_Config_Hierarchy;

/*
 * Defines the speed of the peripheral. This is APBx frequency / Baud Rate divisor
 */
typedef enum {
 SPI_BaudRate_div2,                   // Divide clock frequency by 2
 SPI_BaudRate_div4,                   // Divide clock frequency by 4
 SPI_BaudRate_div8,                   // Divide clock frequency by 8
 SPI_BaudRate_div16,                  // Divide clock frequency by 16
 SPI_BaudRate_div32,                  // Divide clock frequency by 32
 SPI_BaudRate_div64,                  // Divide clock frequency by 64
 SPI_BaudRate_div128,                 // Divide clock frequency by 128
 SPI_BaudRate_div256                  // Divide clock frequency by 256
} SPI_Config_BaudRate; 

/*
 * Defines how data is sent
 */
typedef enum {
 SPI_FrameFormat_MSBFirst,            // Most Significant Bit first 
 SPI_FrameFormat_LSBFirst             // Least Significant Bit First
} SPI_Config_FrameFormat;

/*
 * Software Slave Management configuration. If not selected, the peripheral manages automatically using the Chip Selection pin
 */
typedef enum {
 SPI_SSM_Disable,                     // SSM disabled, managed by hardware on CS pin
 SPI_SSM_Enable,                      // SSM enabled
} SPI_Config_SSM;

/*
 * Defines the length of the data sent in every transaction
 */
typedef enum {
 SPI_DataFormat_8bit,                 // 1 byte data lenght
 SPI_DataFormat_16bit,                // 2 byte data lenght
} SPI_Config_DataFormat;

/*
 * Interruption configuration
 */
typedef enum {
 SPI_It_Disable,                      // Interruption not set for the peripheral
 SPI_It_Enable,                       // Interruption set for the peripheral
}SPI_It_Mode;

/*
 * Interruption status, used when interruption is enalbed
 */
typedef enum {
 SPI_TxState_Ready,                   // Tx Wire is ready to send data
 SPI_TxState_Busy,                    // Tx wire is sending data
} SPI_IT_TxState;

/*
 * SPI periphal configuration
 */
typedef struct{
  SPI_Config_Type Type;               // Sets the wired configuration of the SPI, values can be of SPI_Config_Type
  SPI_Config_Mode Mode;               // Sets the mode of the SPI, defines the polarity and phase of the clock. Values can be of SPI_Config_Mode
  SPI_Config_Hierarchy Hierarchy;     // Selects between Master and Slave modes. Values can be of SPI_Config_Hierarchy
  SPI_Config_BaudRate BaudRate;       // Configures the baud rate of the SPI peripheral (sets a divisor). Values can be of SPI_Config_BaudRate
  SPI_Config_FrameFormat FrameFormat; // Defines if the MSB or the LSB will be transmitted first. Values can be of SPI_Config_FrameFormat
  SPI_Config_SSM SSM;                 // Selects wether the peripheral will manage the chip selection by software or hardware, values can be of SPI_Config_SSM
  SPI_Config_DataFormat DataFormat;   // Configures the lenght of the data transmitted, values can be of SPI_Config_DataFormat
}SPI_ConfigTypeDef;

/*
 *  SPI driver handle
 */
typedef struct{
  SPI_TypeDef *pSPIx;                 // Pointer to SPIx, where x(0..6)
  SPI_ConfigTypeDef Config;           // Structure that configures the SPI peripheral
  SPI_It_Mode InterruptMode;          // Interruption mode configuration
  uint32_t TxLen;                     // Integer variable that holds the amount of bytes to send, used in interruption mode
  uint8_t *pTxBuffer;                 // Pointer to the data buffer, used in interruption mode
  SPI_IT_TxState TxState;             // Variable that indicates when the SPI is busy transmittin data, used in interruption mode
}SPI_DriverTypeDef;

/* Exported functions */

// Initialization function
DriverStatus SPI_Init(SPI_DriverTypeDef *pSPIDriver);

// Data transmission functions
void SPI_SendData(SPI_DriverTypeDef *pSPIDriver, uint8_t *pTxBuffer, uint32_t Len);
DriverStatus SPI_SendDataIT(SPI_DriverTypeDef *pSPIDriver, uint8_t *pTxBuffer, uint32_t Len);

// Interruption configuring and handling
void SPI_IRQ_Handling(SPI_DriverTypeDef *pSPIDriver);
void SPI_IRQ_Control(IRQn_Type IRQNumber, EnableDisable EnOrDi);
void SPI_IRQ_PriorityConfig(IRQn_Type IRQNumber, uint32_t IRQPriority);

// Weak implementation of callback when data has transmitted completely
void SPI_CallbackTxCompleted(SPI_DriverTypeDef *pSPIDriver);

#endif // !__SPI_H__
